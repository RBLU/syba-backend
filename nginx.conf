# the IP(s) on which your node server is running. I chose port 8000.
upstream app_syba-test {
    server 127.0.0.1:3000;
}

# redirect http -> https
server {
    listen 0.0.0.0:80;
    server_name retohome.youpers.org;

    location /nginx_status {
      stub_status on;    # activate stub_status module
      access_log off;
      allow 127.0.0.1;   # restrict access to local only
      deny all;
    }

    location / {
        return 301 https://$host$request_uri;
    }
}

# the https server
server {
    listen 0.0.0.0:443;
    server_name retohome.youpers.org;

    access_log /var/log/nginx/syba-test.access.log timed_combined;
    error_log /var/log/nginx/syba-test.error.log;
    ssl on;
    ssl_certificate      /etc/letsencrypt/live/retohome.youpers.org/fullchain.pem;
    ssl_certificate_key  /etc/letsencrypt/live/retohome.youpers.org/privkey.pem;
    root /home/syba/syba/dist/;
    client_max_body_size 10M;

    gzip on;
    gzip_disable "msie6";

    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    # pass the request to the node.js server with the correct headers and much more can be added, see nginx config options
    # turn off caching for all API calls
    location /api {
        if (-f /home/syba/syba-backend/maintenance-syba-test) {
          return 503;
        }

        # pass the request to the node.js server with the correct headers and much more can be added, see nginx config options
        # turn off caching for all API calls

        rewrite ^/api/(.*) /$1 break;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_set_header X-NginX-Proxy true;

        proxy_pass http://app_syba-test;
        proxy_redirect off;

        proxy_connect_timeout 2s;
        proxy_read_timeout 5s;
        proxy_send_timeout 5s;

        add_header Expires -1;
    }

    # special config for /api/images endpoint --> allow higher timeouts
    #
    location /api/images {
        if (-f /home/youpers/maintenance-syba-test) {
          return 503;
        }

        rewrite ^/api/(.*) /$1 break;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_set_header X-NginX-Proxy true;

        proxy_pass http://app_syba-test;
        proxy_redirect off;

        proxy_connect_timeout 2s;
        proxy_read_timeout 60s;
        proxy_send_timeout 60s;

        add_header Expires -1;
    }

  # serve static files
  # these files we do not revv, there they should be revalidated, for *.html every time
  # The ?: prefix is a 'non-capturing' mark, meaning we do not require
  # the pattern to be captured into $1 which should help improve performance
    location ~* \.(?:html|json)$  {
      if (-f /home/youpers/maintenance-syba-test) {
      return 503;
      }
      expires -1;
      add_header Pragma public;
      add_header Cache-Control "public, must-revalidate, proxy-revalidate";
    }

	# serve static files
    # these files we do not revv, there they should be revalidated, for images we allow 10 hour of caching
    # The ?: prefix is a 'non-capturing' mark, meaning we do not require
    # the pattern to be captured into $1 which should help improve performance
    location ~* \.(?:none)$  {
        expires 36000;
        add_header Pragma public;
        add_header Cache-Control "public, must-revalidate, proxy-revalidate";
    }

   # these files we revv in our build or we change filename always when content changes,
   # the client can therefore cache as long as possible withouth revalidating
    location ~* \.(?:js|css|png|ico|gif|jpeg|jpg)$  {
       expires max;
       add_header Pragma public;
       add_header Cache-Control "public";
    }

    error_page 503 @maintenance;

    location @maintenance {
      rewrite ^(.*)$ /maintenance.html break;
    }
 }

